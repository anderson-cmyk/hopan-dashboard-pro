#!/bin/bash

# Script de Configura√ß√£o Inicial do GCP para HO Pan Dashboard
# Este script configura todos os recursos necess√°rios no Google Cloud Platform

set -e

echo "üöÄ Iniciando configura√ß√£o do GCP para HO Pan Dashboard"
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para printar mensagens coloridas
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se gcloud est√° instalado
if ! command -v gcloud &> /dev/null; then
    print_error "gcloud CLI n√£o est√° instalado. Por favor, instale: https://cloud.google.com/sdk/docs/install"
    exit 1
fi

print_info "gcloud CLI encontrado"

# Solicitar informa√ß√µes do projeto
read -p "Digite o ID do seu projeto GCP: " PROJECT_ID
read -p "Digite a regi√£o preferida (padr√£o: us-central1): " REGION
REGION=${REGION:-us-central1}

print_info "Configurando projeto: $PROJECT_ID"
print_info "Regi√£o: $REGION"

# Configurar projeto padr√£o
gcloud config set project $PROJECT_ID

# Verificar se o projeto existe
if ! gcloud projects describe $PROJECT_ID &> /dev/null; then
    print_error "Projeto $PROJECT_ID n√£o encontrado. Verifique o ID do projeto."
    exit 1
fi

print_info "Projeto verificado com sucesso"

# Habilitar APIs necess√°rias
print_info "Habilitando APIs necess√°rias..."

APIS=(
    "run.googleapis.com"
    "containerregistry.googleapis.com"
    "cloudbuild.googleapis.com"
    "secretmanager.googleapis.com"
    "iam.googleapis.com"
)

for api in "${APIS[@]}"; do
    print_info "Habilitando $api..."
    gcloud services enable $api --project=$PROJECT_ID
done

print_info "Todas as APIs foram habilitadas"

# Criar Service Account
SERVICE_ACCOUNT_NAME="hopan-dashboard-sa"
SERVICE_ACCOUNT_EMAIL="${SERVICE_ACCOUNT_NAME}@${PROJECT_ID}.iam.gserviceaccount.com"

print_info "Criando Service Account..."

if gcloud iam service-accounts describe $SERVICE_ACCOUNT_EMAIL --project=$PROJECT_ID &> /dev/null; then
    print_warning "Service Account j√° existe"
else
    gcloud iam service-accounts create $SERVICE_ACCOUNT_NAME \
        --display-name="HO Pan Dashboard Service Account" \
        --project=$PROJECT_ID
    print_info "Service Account criada: $SERVICE_ACCOUNT_EMAIL"
fi

# Atribuir roles necess√°rias
print_info "Atribuindo permiss√µes..."

ROLES=(
    "roles/run.admin"
    "roles/storage.admin"
    "roles/cloudbuild.builds.builder"
    "roles/iam.serviceAccountUser"
)

for role in "${ROLES[@]}"; do
    print_info "Atribuindo $role..."
    gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:$SERVICE_ACCOUNT_EMAIL" \
        --role="$role" \
        --quiet
done

# Criar chave da Service Account
KEY_FILE="service-account-key.json"
print_info "Criando chave da Service Account..."

gcloud iam service-accounts keys create $KEY_FILE \
    --iam-account=$SERVICE_ACCOUNT_EMAIL \
    --project=$PROJECT_ID

print_info "Chave criada: $KEY_FILE"

# Gerar senha de admin segura
ADMIN_PASSWORD=$(openssl rand -base64 24)
print_info "Senha de admin gerada"

# Criar arquivo de vari√°veis de ambiente
ENV_FILE=".env.production"
cat > $ENV_FILE << EOF
# Configura√ß√µes do GCP
GCP_PROJECT_ID=$PROJECT_ID
GCP_REGION=$REGION
GCP_SERVICE_ACCOUNT=$SERVICE_ACCOUNT_EMAIL

# Configura√ß√µes da aplica√ß√£o
SECRET_KEY=$(openssl rand -hex 32)
ADMIN_PASSWORD=$ADMIN_PASSWORD

# Configura√ß√µes do GitHub (preencha com seus valores)
GITHUB_TOKEN=seu_github_token_aqui
GITHUB_REPO=seu_usuario/seu_repositorio
GITHUB_USER=seu_usuario

# Service Account Key (caminho)
GOOGLE_APPLICATION_CREDENTIALS=./$KEY_FILE
EOF

print_info "Arquivo de ambiente criado: $ENV_FILE"

# Criar arquivo de secrets para GitHub
SECRETS_FILE="github-secrets.txt"
cat > $SECRETS_FILE << EOF
# Secrets para configurar no GitHub Actions
# V√° em: Settings > Secrets and variables > Actions > New repository secret

GCP_PROJECT_ID=$PROJECT_ID
GCP_SA_KEY=$(cat $KEY_FILE | base64 -w 0)
SECRET_KEY=$(grep SECRET_KEY $ENV_FILE | cut -d'=' -f2)
ADMIN_PASSWORD_HASH=\$(python3 -c "from werkzeug.security import generate_password_hash; print(generate_password_hash('$ADMIN_PASSWORD'))")

# Preencha estes com seus valores:
GITHUB_TOKEN=seu_github_token_aqui
GITHUB_REPO=seu_usuario/seu_repositorio
GITHUB_USER=seu_usuario

# Opcional - Usu√°rios adicionais (formato JSON)
ADDITIONAL_USERS={}
EOF

print_info "Arquivo de secrets criado: $SECRETS_FILE"

# Criar arquivo de instru√ß√µes
INSTRUCTIONS_FILE="PROXIMOS_PASSOS.txt"
cat > $INSTRUCTIONS_FILE << EOF
‚úÖ Configura√ß√£o do GCP conclu√≠da com sucesso!

üìã PR√ìXIMOS PASSOS:

1. CREDENCIAIS GERADAS:
   - Service Account Key: $KEY_FILE
   - Vari√°veis de ambiente: $ENV_FILE
   - Secrets do GitHub: $SECRETS_FILE
   - Senha de Admin: $ADMIN_PASSWORD

   ‚ö†Ô∏è  IMPORTANTE: Guarde a senha de admin em local seguro!

2. CONFIGURAR GITHUB:
   a) V√° at√© seu reposit√≥rio no GitHub
   b) Acesse: Settings > Secrets and variables > Actions
   c) Adicione cada secret do arquivo $SECRETS_FILE
   d) Preencha os valores do GitHub Token, Repo e User

3. FAZER PRIMEIRO DEPLOY:
   a) Commit e push do c√≥digo para o reposit√≥rio
   b) O GitHub Actions far√° o deploy automaticamente
   c) Ou execute manualmente: gcloud run deploy

4. ACESSAR O DASHBOARD:
   - Ap√≥s o deploy, a URL ser√° exibida no GitHub Actions
   - Fa√ßa login com: admin / $ADMIN_PASSWORD

5. CONFIGURAR DOM√çNIO CUSTOMIZADO (Opcional):
   - No Cloud Run, v√° em "Manage Custom Domains"
   - Adicione seu dom√≠nio personalizado
   - Configure os registros DNS

6. ADICIONAR USU√ÅRIOS:
   - Edite o secret ADDITIONAL_USERS no GitHub
   - Formato JSON: {"usuario": {"password": "hash", "name": "Nome", "role": "user"}}
   - Gere hash com: python3 -c "from werkzeug.security import generate_password_hash; print(generate_password_hash('senha'))"

üìö DOCUMENTA√á√ÉO:
   - Cloud Run: https://cloud.google.com/run/docs
   - GitHub Actions: https://docs.github.com/actions

üîí SEGURAN√áA:
   - Nunca commite o arquivo $KEY_FILE no Git
   - Mantenha as senhas em local seguro
   - Rotacione as credenciais periodicamente

üéâ Tudo pronto! Seu dashboard est√° configurado para deployment profissional.
EOF

print_info "Arquivo de instru√ß√µes criado: $INSTRUCTIONS_FILE"

# Resumo final
echo ""
echo "=================================================="
print_info "‚úÖ Configura√ß√£o conclu√≠da com sucesso!"
echo "=================================================="
echo ""
echo "üìÅ Arquivos criados:"
echo "   - $KEY_FILE (Service Account Key)"
echo "   - $ENV_FILE (Vari√°veis de ambiente)"
echo "   - $SECRETS_FILE (Secrets para GitHub)"
echo "   - $INSTRUCTIONS_FILE (Pr√≥ximos passos)"
echo ""
echo "üîê Credenciais de Admin:"
echo "   Usu√°rio: admin"
echo "   Senha: $ADMIN_PASSWORD"
echo ""
print_warning "‚ö†Ô∏è  IMPORTANTE: Guarde essas credenciais em local seguro!"
echo ""
print_info "üìñ Leia o arquivo $INSTRUCTIONS_FILE para os pr√≥ximos passos"
echo ""
